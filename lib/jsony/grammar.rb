module JSONY;end
require 'pegex/grammar'
class JSONY::Grammar < Pegex::Grammar
  def make_tree
{"+toprule"=>"jsony",
 "+grammar"=>"jsony",
 "+version"=>"0.0.1",
 "jsony"=>
  {".any"=>
    [{".ref"=>"seq"},
     {".ref"=>"map"},
     {".ref"=>"top_seq"},
     {".ref"=>"top_map"},
     {".ref"=>"list"}]},
 "seq"=>
  {".all"=>
    [{".rgx"=>"(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*"},
     {".ref"=>"LSQUARE"},
     {".rgx"=>"(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*"},
     {".ref"=>"node",
      "+min"=>0,
      ".sep"=>
       {".rgx"=>
         "(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*,?(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*",
        "+eok"=>true}},
     {".rgx"=>"(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*"},
     {".ref"=>"RSQUARE"},
     {".rgx"=>"(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*"}]},
 "LSQUARE"=>{".rgx"=>"\\["},
 "node"=>{".any"=>[{".ref"=>"map"}, {".ref"=>"seq"}, {".ref"=>"scalar"}]},
 "map"=>
  {".all"=>
    [{".rgx"=>"(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*"},
     {".ref"=>"LCURLY"},
     {".rgx"=>"(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*"},
     {".ref"=>"pair", "+min"=>0},
     {".rgx"=>"(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*"},
     {".ref"=>"RCURLY"},
     {".rgx"=>"(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*"}]},
 "LCURLY"=>{".rgx"=>"\\{"},
 "pair"=>
  {".all"=>
    [{".ref"=>"string"},
     {".rgx"=>
       "(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*:?(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*"},
     {".ref"=>"node"},
     {".rgx"=>
       "(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*,?(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*"}]},
 "string"=>{".ref"=>"scalar"},
 "scalar"=>
  {".any"=>[{".ref"=>"double"}, {".ref"=>"single"}, {".ref"=>"bare"}]},
 "double"=>
  {".rgx"=>
    "\"((?:\\\\(?:[\"\\\\/bfnrt]|u[0-9a-fA-F]{4})|[^\"\\x00-\\x1f])*)\""},
 "single"=>{".rgx"=>"'([^']*)'"},
 "bare"=>{".rgx"=>"([^\\s\\{\\}\\[\\]'\",]*[^\\s\\{\\}\\[\\]'\",:])"},
 "RCURLY"=>{".rgx"=>"\\}"},
 "RSQUARE"=>{".rgx"=>"\\]"},
 "top_seq"=>{".ref"=>"top_seq_entry", "+min"=>1},
 "top_seq_entry"=>
  {".all"=>
    [{".rgx"=>"(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*\\-\\ +"},
     {".all"=>
       [{".ref"=>"node",
         "+min"=>0,
         ".sep"=>
          {".rgx"=>
            "(?:\\ *,\\ *\\r?\\n(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*|\\ +)",
           "+eok"=>true}},
        {".any"=>[{".ref"=>"comment"}, {".ref"=>"EOL"}]}]}]},
 "comment"=>{".rgx"=>"(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n)"},
 "EOL"=>{".rgx"=>"\\r?\\n"},
 "top_map"=>
  {".all"=>
    [{".ref"=>"string"},
     {".rgx"=>
       "(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*:(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*"},
     {".ref"=>"node"},
     {".rgx"=>"(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*"}],
   "+min"=>1},
 "list"=>
  {".ref"=>"node",
   "+min"=>0,
   ".sep"=>
    {".rgx"=>
      "(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*,?(?:\\s|(?:\\#\\ .*\\r?\\n|\\#\\r?\\n|\\ *\\r?\\n))*",
     "+eok"=>true}}}
  end
end
